<?php declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\CurrentProduct;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Catalog\Block\Product\View;
use Magento\Catalog\Model\Product;
use Magento\Framework\Escaper;
use Siteation\Share\ViewModel\Share as ShareProduct;

/** @var View $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var CurrentProduct $currentProduct */
$currentProduct = $viewModels->require(CurrentProduct::class);

/** @var ShareProduct $shareViewModel */
$shareViewModel = $viewModels->require(ShareProduct::class);

// TODO: swap with outline when PR (https://gitlab.hyva.io/hyva-themes/magento2-default-theme/-/merge_requests/431) is merged
/** @var HeroiconsSolid $heroicons */
$heroicons = $viewModels->require(HeroiconsSolid::class);

/** @var Product $product */
$product = $currentProduct->exists() ? $currentProduct->get() : false;

if (!$product || !$shareViewModel->canShare()) {
    return '';
}
?>

<button
    id="share-product"
    type="button"
    disabled
    class="inline-flex items-center justify-center rounded-full w-10 h-10 ml-2 cursor-not-allowed bg-gray-100 text-gray-300"
>
    <?= $heroicons->shareHtml('', 20, 20) ?>
    <span class="sr-only"><?= $escaper->escapeHtmlAttr(__('Share Product')) ?></span>
</button>

<script>
    (() => {
        const shareButton = document.getElementById('share-product');
        const activeClasses = ['bg-gray-200', 'text-gray-500', 'hover:text-blue-600'];
        const inActiveClasses = ['bg-gray-100', 'text-gray-300', 'cursor-not-allowed'];
        const activeMessage = 3000;
        const shareData = {
            title: '<?= $product->getName(); ?>',
            text: '<?= $product->getName(); ?>',
            url: '<?= $product->getProductUrl(); ?>'
        };

        const activeBtn = () => {
            shareButton.removeAttribute('disabled');
            shareButton.classList.remove(...inActiveClasses);
            shareButton.classList.add(...activeClasses);
        };

        const disableBtn = () => {
            shareButton.setAttribute('disabled', '');
            shareButton.classList.add(...inActiveClasses);
            shareButton.classList.remove(...activeClasses);
        };

        const copyToClipboard = () => {
            navigator.clipboard.writeText(shareData.url);
            dispatchMessages([
                {
                    type: "success",
                    text: "<?= $escaper->escapeHtmlAttr(__('Success, Link copied to clipboard:')) ?> " + shareData.url
                }
            ], activeMessage);
            disableBtn();
            setTimeout(() => activeBtn(), activeMessage);
        }

        activeBtn();

        shareButton.addEventListener('click', async () => {
            if (navigator.canShare) {
                try {
                    await navigator.share(shareData);
                } catch (err) {
                    console.warn(err);
                }
                return;
            }

            copyToClipboard();
            return;
        });
    })();
</script>
